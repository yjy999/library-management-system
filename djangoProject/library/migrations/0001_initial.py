# Generated by Django 2.1.2 on 2021-12-14 21:10

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='作者名称')),
            ],
        ),
        migrations.CreateModel(
            name='Books',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_num', models.CharField(max_length=32, verbose_name='图书编号')),
                ('book_name', models.CharField(max_length=128, verbose_name='图书名称')),
                ('author', models.CharField(max_length=255, verbose_name='作者')),
                ('book_type', models.CharField(max_length=32, verbose_name='图书类型')),
                ('book_price', models.DecimalField(decimal_places=2, default=10.01, max_digits=5, verbose_name='图书价格')),
                ('book_inventory', models.IntegerField(verbose_name='图书库存')),
                ('book_score', models.DecimalField(decimal_places=1, default=10.0, max_digits=5, verbose_name='图书评分')),
                ('book_description', models.TextField(verbose_name='图书简介')),
                ('book_sales', models.IntegerField(verbose_name='图书销量')),
                ('comment_nums', models.IntegerField(default=0, verbose_name='评论量')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img_address', models.ImageField(upload_to='', verbose_name='图片路径')),
                ('img_label', models.CharField(max_length=128, verbose_name='图片名称')),
                ('books', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.Books', verbose_name='图书')),
            ],
        ),
        migrations.CreateModel(
            name='Librarian',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='用户名')),
                ('nick_name', models.CharField(max_length=32, verbose_name='昵称')),
                ('password', models.CharField(max_length=32, verbose_name='密码')),
            ],
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='出版社名称')),
                ('address', models.CharField(max_length=128, verbose_name='出版社地址')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='用户名')),
                ('nickname', models.CharField(max_length=32, verbose_name='用户昵称')),
                ('password', models.CharField(max_length=32, verbose_name='密码')),
                ('phone', models.CharField(max_length=11, verbose_name='电话号码')),
                ('last_time', models.DateTimeField(auto_now=True, verbose_name='登录时间')),
                ('books', models.ManyToManyField(to='library.Books', verbose_name='图书')),
            ],
        ),
        migrations.AddField(
            model_name='books',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.Publisher', verbose_name='出版社名称'),
        ),
        migrations.AddField(
            model_name='author',
            name='books',
            field=models.ManyToManyField(related_name='author_book', to='library.Books', verbose_name='图书'),
        ),
    ]
